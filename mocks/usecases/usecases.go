// Code generated by MockGen. DO NOT EDIT.
// Source: usecases.go
//
// Generated by this command:
//
//	mockgen -source=usecases.go -destination=../../mocks/usecases/usecases.go -package=mockusecases
//

// Package mockusecases is a generated GoMock package.
package mockusecases

import (
	context "context"
	reflect "reflect"

	graphql "github.com/99designs/gqlgen/graphql"
	entities "github.com/DKhorkov/hmtm-bff/internal/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockUseCases is a mock of UseCases interface.
type MockUseCases struct {
	ctrl     *gomock.Controller
	recorder *MockUseCasesMockRecorder
	isgomock struct{}
}

// MockUseCasesMockRecorder is the mock recorder for MockUseCases.
type MockUseCasesMockRecorder struct {
	mock *MockUseCases
}

// NewMockUseCases creates a new mock instance.
func NewMockUseCases(ctrl *gomock.Controller) *MockUseCases {
	mock := &MockUseCases{ctrl: ctrl}
	mock.recorder = &MockUseCasesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCases) EXPECT() *MockUseCasesMockRecorder {
	return m.recorder
}

// AddToy mocks base method.
func (m *MockUseCases) AddToy(ctx context.Context, rawToyData entities.RawAddToyDTO) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToy", ctx, rawToyData)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddToy indicates an expected call of AddToy.
func (mr *MockUseCasesMockRecorder) AddToy(ctx, rawToyData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToy", reflect.TypeOf((*MockUseCases)(nil).AddToy), ctx, rawToyData)
}

// ChangePassword mocks base method.
func (m *MockUseCases) ChangePassword(ctx context.Context, accessToken, oldPassword, newPassword string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePassword", ctx, accessToken, oldPassword, newPassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangePassword indicates an expected call of ChangePassword.
func (mr *MockUseCasesMockRecorder) ChangePassword(ctx, accessToken, oldPassword, newPassword any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePassword", reflect.TypeOf((*MockUseCases)(nil).ChangePassword), ctx, accessToken, oldPassword, newPassword)
}

// CreateTicket mocks base method.
func (m *MockUseCases) CreateTicket(ctx context.Context, rawTicketData entities.RawCreateTicketDTO) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTicket", ctx, rawTicketData)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTicket indicates an expected call of CreateTicket.
func (mr *MockUseCasesMockRecorder) CreateTicket(ctx, rawTicketData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTicket", reflect.TypeOf((*MockUseCases)(nil).CreateTicket), ctx, rawTicketData)
}

// DeleteRespond mocks base method.
func (m *MockUseCases) DeleteRespond(ctx context.Context, accessToken string, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRespond", ctx, accessToken, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRespond indicates an expected call of DeleteRespond.
func (mr *MockUseCasesMockRecorder) DeleteRespond(ctx, accessToken, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRespond", reflect.TypeOf((*MockUseCases)(nil).DeleteRespond), ctx, accessToken, id)
}

// DeleteTicket mocks base method.
func (m *MockUseCases) DeleteTicket(ctx context.Context, accessToken string, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTicket", ctx, accessToken, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTicket indicates an expected call of DeleteTicket.
func (mr *MockUseCasesMockRecorder) DeleteTicket(ctx, accessToken, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTicket", reflect.TypeOf((*MockUseCases)(nil).DeleteTicket), ctx, accessToken, id)
}

// DeleteToy mocks base method.
func (m *MockUseCases) DeleteToy(ctx context.Context, accessToken string, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteToy", ctx, accessToken, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteToy indicates an expected call of DeleteToy.
func (mr *MockUseCasesMockRecorder) DeleteToy(ctx, accessToken, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteToy", reflect.TypeOf((*MockUseCases)(nil).DeleteToy), ctx, accessToken, id)
}

// ForgetPassword mocks base method.
func (m *MockUseCases) ForgetPassword(ctx context.Context, forgetPasswordToken, newPassword string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForgetPassword", ctx, forgetPasswordToken, newPassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// ForgetPassword indicates an expected call of ForgetPassword.
func (mr *MockUseCasesMockRecorder) ForgetPassword(ctx, forgetPasswordToken, newPassword any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForgetPassword", reflect.TypeOf((*MockUseCases)(nil).ForgetPassword), ctx, forgetPasswordToken, newPassword)
}

// GetAllCategories mocks base method.
func (m *MockUseCases) GetAllCategories(ctx context.Context) ([]entities.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCategories", ctx)
	ret0, _ := ret[0].([]entities.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCategories indicates an expected call of GetAllCategories.
func (mr *MockUseCasesMockRecorder) GetAllCategories(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCategories", reflect.TypeOf((*MockUseCases)(nil).GetAllCategories), ctx)
}

// GetAllMasters mocks base method.
func (m *MockUseCases) GetAllMasters(ctx context.Context) ([]entities.Master, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMasters", ctx)
	ret0, _ := ret[0].([]entities.Master)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllMasters indicates an expected call of GetAllMasters.
func (mr *MockUseCasesMockRecorder) GetAllMasters(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMasters", reflect.TypeOf((*MockUseCases)(nil).GetAllMasters), ctx)
}

// GetAllTags mocks base method.
func (m *MockUseCases) GetAllTags(ctx context.Context) ([]entities.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTags", ctx)
	ret0, _ := ret[0].([]entities.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTags indicates an expected call of GetAllTags.
func (mr *MockUseCasesMockRecorder) GetAllTags(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTags", reflect.TypeOf((*MockUseCases)(nil).GetAllTags), ctx)
}

// GetAllTickets mocks base method.
func (m *MockUseCases) GetAllTickets(ctx context.Context) ([]entities.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTickets", ctx)
	ret0, _ := ret[0].([]entities.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTickets indicates an expected call of GetAllTickets.
func (mr *MockUseCasesMockRecorder) GetAllTickets(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTickets", reflect.TypeOf((*MockUseCases)(nil).GetAllTickets), ctx)
}

// GetAllToys mocks base method.
func (m *MockUseCases) GetAllToys(ctx context.Context) ([]entities.Toy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllToys", ctx)
	ret0, _ := ret[0].([]entities.Toy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllToys indicates an expected call of GetAllToys.
func (mr *MockUseCasesMockRecorder) GetAllToys(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllToys", reflect.TypeOf((*MockUseCases)(nil).GetAllToys), ctx)
}

// GetAllUsers mocks base method.
func (m *MockUseCases) GetAllUsers(ctx context.Context) ([]entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsers", ctx)
	ret0, _ := ret[0].([]entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsers indicates an expected call of GetAllUsers.
func (mr *MockUseCasesMockRecorder) GetAllUsers(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsers", reflect.TypeOf((*MockUseCases)(nil).GetAllUsers), ctx)
}

// GetCategoryByID mocks base method.
func (m *MockUseCases) GetCategoryByID(ctx context.Context, id uint32) (*entities.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryByID", ctx, id)
	ret0, _ := ret[0].(*entities.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoryByID indicates an expected call of GetCategoryByID.
func (mr *MockUseCasesMockRecorder) GetCategoryByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryByID", reflect.TypeOf((*MockUseCases)(nil).GetCategoryByID), ctx, id)
}

// GetMasterByID mocks base method.
func (m *MockUseCases) GetMasterByID(ctx context.Context, id uint64) (*entities.Master, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMasterByID", ctx, id)
	ret0, _ := ret[0].(*entities.Master)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMasterByID indicates an expected call of GetMasterByID.
func (mr *MockUseCasesMockRecorder) GetMasterByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMasterByID", reflect.TypeOf((*MockUseCases)(nil).GetMasterByID), ctx, id)
}

// GetMasterByUserID mocks base method.
func (m *MockUseCases) GetMasterByUserID(ctx context.Context, userID uint64) (*entities.Master, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMasterByUserID", ctx, userID)
	ret0, _ := ret[0].(*entities.Master)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMasterByUserID indicates an expected call of GetMasterByUserID.
func (mr *MockUseCasesMockRecorder) GetMasterByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMasterByUserID", reflect.TypeOf((*MockUseCases)(nil).GetMasterByUserID), ctx, userID)
}

// GetMasterToys mocks base method.
func (m *MockUseCases) GetMasterToys(ctx context.Context, masterID uint64) ([]entities.Toy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMasterToys", ctx, masterID)
	ret0, _ := ret[0].([]entities.Toy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMasterToys indicates an expected call of GetMasterToys.
func (mr *MockUseCasesMockRecorder) GetMasterToys(ctx, masterID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMasterToys", reflect.TypeOf((*MockUseCases)(nil).GetMasterToys), ctx, masterID)
}

// GetMe mocks base method.
func (m *MockUseCases) GetMe(ctx context.Context, accessToken string) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMe", ctx, accessToken)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMe indicates an expected call of GetMe.
func (mr *MockUseCasesMockRecorder) GetMe(ctx, accessToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMe", reflect.TypeOf((*MockUseCases)(nil).GetMe), ctx, accessToken)
}

// GetMyEmailCommunications mocks base method.
func (m *MockUseCases) GetMyEmailCommunications(ctx context.Context, accessToken string) ([]entities.Email, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMyEmailCommunications", ctx, accessToken)
	ret0, _ := ret[0].([]entities.Email)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMyEmailCommunications indicates an expected call of GetMyEmailCommunications.
func (mr *MockUseCasesMockRecorder) GetMyEmailCommunications(ctx, accessToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMyEmailCommunications", reflect.TypeOf((*MockUseCases)(nil).GetMyEmailCommunications), ctx, accessToken)
}

// GetMyResponds mocks base method.
func (m *MockUseCases) GetMyResponds(ctx context.Context, accessToken string) ([]entities.Respond, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMyResponds", ctx, accessToken)
	ret0, _ := ret[0].([]entities.Respond)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMyResponds indicates an expected call of GetMyResponds.
func (mr *MockUseCasesMockRecorder) GetMyResponds(ctx, accessToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMyResponds", reflect.TypeOf((*MockUseCases)(nil).GetMyResponds), ctx, accessToken)
}

// GetMyTickets mocks base method.
func (m *MockUseCases) GetMyTickets(ctx context.Context, accessToken string) ([]entities.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMyTickets", ctx, accessToken)
	ret0, _ := ret[0].([]entities.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMyTickets indicates an expected call of GetMyTickets.
func (mr *MockUseCasesMockRecorder) GetMyTickets(ctx, accessToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMyTickets", reflect.TypeOf((*MockUseCases)(nil).GetMyTickets), ctx, accessToken)
}

// GetMyToys mocks base method.
func (m *MockUseCases) GetMyToys(ctx context.Context, accessToken string) ([]entities.Toy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMyToys", ctx, accessToken)
	ret0, _ := ret[0].([]entities.Toy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMyToys indicates an expected call of GetMyToys.
func (mr *MockUseCasesMockRecorder) GetMyToys(ctx, accessToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMyToys", reflect.TypeOf((*MockUseCases)(nil).GetMyToys), ctx, accessToken)
}

// GetRespondByID mocks base method.
func (m *MockUseCases) GetRespondByID(ctx context.Context, id uint64, accessToken string) (*entities.Respond, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRespondByID", ctx, id, accessToken)
	ret0, _ := ret[0].(*entities.Respond)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRespondByID indicates an expected call of GetRespondByID.
func (mr *MockUseCasesMockRecorder) GetRespondByID(ctx, id, accessToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRespondByID", reflect.TypeOf((*MockUseCases)(nil).GetRespondByID), ctx, id, accessToken)
}

// GetTagByID mocks base method.
func (m *MockUseCases) GetTagByID(ctx context.Context, id uint32) (*entities.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTagByID", ctx, id)
	ret0, _ := ret[0].(*entities.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagByID indicates an expected call of GetTagByID.
func (mr *MockUseCasesMockRecorder) GetTagByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagByID", reflect.TypeOf((*MockUseCases)(nil).GetTagByID), ctx, id)
}

// GetTicketByID mocks base method.
func (m *MockUseCases) GetTicketByID(ctx context.Context, id uint64) (*entities.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTicketByID", ctx, id)
	ret0, _ := ret[0].(*entities.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTicketByID indicates an expected call of GetTicketByID.
func (mr *MockUseCasesMockRecorder) GetTicketByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTicketByID", reflect.TypeOf((*MockUseCases)(nil).GetTicketByID), ctx, id)
}

// GetTicketResponds mocks base method.
func (m *MockUseCases) GetTicketResponds(ctx context.Context, ticketID uint64, accessToken string) ([]entities.Respond, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTicketResponds", ctx, ticketID, accessToken)
	ret0, _ := ret[0].([]entities.Respond)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTicketResponds indicates an expected call of GetTicketResponds.
func (mr *MockUseCasesMockRecorder) GetTicketResponds(ctx, ticketID, accessToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTicketResponds", reflect.TypeOf((*MockUseCases)(nil).GetTicketResponds), ctx, ticketID, accessToken)
}

// GetToyByID mocks base method.
func (m *MockUseCases) GetToyByID(ctx context.Context, id uint64) (*entities.Toy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToyByID", ctx, id)
	ret0, _ := ret[0].(*entities.Toy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetToyByID indicates an expected call of GetToyByID.
func (mr *MockUseCasesMockRecorder) GetToyByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToyByID", reflect.TypeOf((*MockUseCases)(nil).GetToyByID), ctx, id)
}

// GetUserByEmail mocks base method.
func (m *MockUseCases) GetUserByEmail(ctx context.Context, email string) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockUseCasesMockRecorder) GetUserByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockUseCases)(nil).GetUserByEmail), ctx, email)
}

// GetUserByID mocks base method.
func (m *MockUseCases) GetUserByID(ctx context.Context, id uint64) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, id)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUseCasesMockRecorder) GetUserByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUseCases)(nil).GetUserByID), ctx, id)
}

// GetUserTickets mocks base method.
func (m *MockUseCases) GetUserTickets(ctx context.Context, userID uint64) ([]entities.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserTickets", ctx, userID)
	ret0, _ := ret[0].([]entities.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserTickets indicates an expected call of GetUserTickets.
func (mr *MockUseCasesMockRecorder) GetUserTickets(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserTickets", reflect.TypeOf((*MockUseCases)(nil).GetUserTickets), ctx, userID)
}

// LoginUser mocks base method.
func (m *MockUseCases) LoginUser(ctx context.Context, userData entities.LoginUserDTO) (*entities.TokensDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginUser", ctx, userData)
	ret0, _ := ret[0].(*entities.TokensDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginUser indicates an expected call of LoginUser.
func (mr *MockUseCasesMockRecorder) LoginUser(ctx, userData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginUser", reflect.TypeOf((*MockUseCases)(nil).LoginUser), ctx, userData)
}

// LogoutUser mocks base method.
func (m *MockUseCases) LogoutUser(ctx context.Context, accessToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogoutUser", ctx, accessToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogoutUser indicates an expected call of LogoutUser.
func (mr *MockUseCasesMockRecorder) LogoutUser(ctx, accessToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogoutUser", reflect.TypeOf((*MockUseCases)(nil).LogoutUser), ctx, accessToken)
}

// RefreshTokens mocks base method.
func (m *MockUseCases) RefreshTokens(ctx context.Context, refreshToken string) (*entities.TokensDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshTokens", ctx, refreshToken)
	ret0, _ := ret[0].(*entities.TokensDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshTokens indicates an expected call of RefreshTokens.
func (mr *MockUseCasesMockRecorder) RefreshTokens(ctx, refreshToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshTokens", reflect.TypeOf((*MockUseCases)(nil).RefreshTokens), ctx, refreshToken)
}

// RegisterMaster mocks base method.
func (m *MockUseCases) RegisterMaster(ctx context.Context, rawMasterData entities.RawRegisterMasterDTO) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterMaster", ctx, rawMasterData)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterMaster indicates an expected call of RegisterMaster.
func (mr *MockUseCasesMockRecorder) RegisterMaster(ctx, rawMasterData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterMaster", reflect.TypeOf((*MockUseCases)(nil).RegisterMaster), ctx, rawMasterData)
}

// RegisterUser mocks base method.
func (m *MockUseCases) RegisterUser(ctx context.Context, userData entities.RegisterUserDTO) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", ctx, userData)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockUseCasesMockRecorder) RegisterUser(ctx, userData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockUseCases)(nil).RegisterUser), ctx, userData)
}

// RespondToTicket mocks base method.
func (m *MockUseCases) RespondToTicket(ctx context.Context, rawRespondData entities.RawRespondToTicketDTO) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RespondToTicket", ctx, rawRespondData)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RespondToTicket indicates an expected call of RespondToTicket.
func (mr *MockUseCasesMockRecorder) RespondToTicket(ctx, rawRespondData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RespondToTicket", reflect.TypeOf((*MockUseCases)(nil).RespondToTicket), ctx, rawRespondData)
}

// SendForgetPasswordMessage mocks base method.
func (m *MockUseCases) SendForgetPasswordMessage(ctx context.Context, email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendForgetPasswordMessage", ctx, email)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendForgetPasswordMessage indicates an expected call of SendForgetPasswordMessage.
func (mr *MockUseCasesMockRecorder) SendForgetPasswordMessage(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendForgetPasswordMessage", reflect.TypeOf((*MockUseCases)(nil).SendForgetPasswordMessage), ctx, email)
}

// SendVerifyEmailMessage mocks base method.
func (m *MockUseCases) SendVerifyEmailMessage(ctx context.Context, email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendVerifyEmailMessage", ctx, email)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendVerifyEmailMessage indicates an expected call of SendVerifyEmailMessage.
func (mr *MockUseCasesMockRecorder) SendVerifyEmailMessage(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendVerifyEmailMessage", reflect.TypeOf((*MockUseCases)(nil).SendVerifyEmailMessage), ctx, email)
}

// UpdateMaster mocks base method.
func (m *MockUseCases) UpdateMaster(ctx context.Context, rawMasterData entities.RawUpdateMasterDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMaster", ctx, rawMasterData)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMaster indicates an expected call of UpdateMaster.
func (mr *MockUseCasesMockRecorder) UpdateMaster(ctx, rawMasterData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMaster", reflect.TypeOf((*MockUseCases)(nil).UpdateMaster), ctx, rawMasterData)
}

// UpdateRespond mocks base method.
func (m *MockUseCases) UpdateRespond(ctx context.Context, rawRespondData entities.RawUpdateRespondDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRespond", ctx, rawRespondData)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRespond indicates an expected call of UpdateRespond.
func (mr *MockUseCasesMockRecorder) UpdateRespond(ctx, rawRespondData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRespond", reflect.TypeOf((*MockUseCases)(nil).UpdateRespond), ctx, rawRespondData)
}

// UpdateTicket mocks base method.
func (m *MockUseCases) UpdateTicket(ctx context.Context, rawTicketData entities.RawUpdateTicketDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTicket", ctx, rawTicketData)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTicket indicates an expected call of UpdateTicket.
func (mr *MockUseCasesMockRecorder) UpdateTicket(ctx, rawTicketData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTicket", reflect.TypeOf((*MockUseCases)(nil).UpdateTicket), ctx, rawTicketData)
}

// UpdateToy mocks base method.
func (m *MockUseCases) UpdateToy(ctx context.Context, rawToyData entities.RawUpdateToyDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateToy", ctx, rawToyData)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateToy indicates an expected call of UpdateToy.
func (mr *MockUseCasesMockRecorder) UpdateToy(ctx, rawToyData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateToy", reflect.TypeOf((*MockUseCases)(nil).UpdateToy), ctx, rawToyData)
}

// UpdateUserProfile mocks base method.
func (m *MockUseCases) UpdateUserProfile(ctx context.Context, rawUserProfileData entities.RawUpdateUserProfileDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserProfile", ctx, rawUserProfileData)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserProfile indicates an expected call of UpdateUserProfile.
func (mr *MockUseCasesMockRecorder) UpdateUserProfile(ctx, rawUserProfileData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserProfile", reflect.TypeOf((*MockUseCases)(nil).UpdateUserProfile), ctx, rawUserProfileData)
}

// UploadFile mocks base method.
func (m *MockUseCases) UploadFile(ctx context.Context, userID uint64, files *graphql.Upload) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFile", ctx, userID, files)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadFile indicates an expected call of UploadFile.
func (mr *MockUseCasesMockRecorder) UploadFile(ctx, userID, files any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFile", reflect.TypeOf((*MockUseCases)(nil).UploadFile), ctx, userID, files)
}

// UploadFiles mocks base method.
func (m *MockUseCases) UploadFiles(ctx context.Context, userID uint64, files []*graphql.Upload) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFiles", ctx, userID, files)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadFiles indicates an expected call of UploadFiles.
func (mr *MockUseCasesMockRecorder) UploadFiles(ctx, userID, files any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFiles", reflect.TypeOf((*MockUseCases)(nil).UploadFiles), ctx, userID, files)
}

// VerifyUserEmail mocks base method.
func (m *MockUseCases) VerifyUserEmail(ctx context.Context, verifyEmailToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyUserEmail", ctx, verifyEmailToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyUserEmail indicates an expected call of VerifyUserEmail.
func (mr *MockUseCasesMockRecorder) VerifyUserEmail(ctx, verifyEmailToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyUserEmail", reflect.TypeOf((*MockUseCases)(nil).VerifyUserEmail), ctx, verifyEmailToken)
}
