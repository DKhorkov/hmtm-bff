// Code generated by MockGen. DO NOT EDIT.
// Source: services.go
//
// Generated by this command:
//
//	mockgen -source=services.go -destination=../../mocks/services/sso_service.go -package=mockservices -exclude_interfaces=ToysService,FileStorageService,TicketsService,NotificationsService
//

// Package mockservices is a generated GoMock package.
package mockservices

import (
	context "context"
	reflect "reflect"

	entities "github.com/DKhorkov/hmtm-bff/internal/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockSsoService is a mock of SsoService interface.
type MockSsoService struct {
	ctrl     *gomock.Controller
	recorder *MockSsoServiceMockRecorder
	isgomock struct{}
}

// MockSsoServiceMockRecorder is the mock recorder for MockSsoService.
type MockSsoServiceMockRecorder struct {
	mock *MockSsoService
}

// NewMockSsoService creates a new mock instance.
func NewMockSsoService(ctrl *gomock.Controller) *MockSsoService {
	mock := &MockSsoService{ctrl: ctrl}
	mock.recorder = &MockSsoServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSsoService) EXPECT() *MockSsoServiceMockRecorder {
	return m.recorder
}

// ChangePassword mocks base method.
func (m *MockSsoService) ChangePassword(ctx context.Context, accessToken, oldPassword, newPassword string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePassword", ctx, accessToken, oldPassword, newPassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangePassword indicates an expected call of ChangePassword.
func (mr *MockSsoServiceMockRecorder) ChangePassword(ctx, accessToken, oldPassword, newPassword any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePassword", reflect.TypeOf((*MockSsoService)(nil).ChangePassword), ctx, accessToken, oldPassword, newPassword)
}

// ForgetPassword mocks base method.
func (m *MockSsoService) ForgetPassword(ctx context.Context, forgetPasswordToken, newPassword string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForgetPassword", ctx, forgetPasswordToken, newPassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// ForgetPassword indicates an expected call of ForgetPassword.
func (mr *MockSsoServiceMockRecorder) ForgetPassword(ctx, forgetPasswordToken, newPassword any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForgetPassword", reflect.TypeOf((*MockSsoService)(nil).ForgetPassword), ctx, forgetPasswordToken, newPassword)
}

// GetMe mocks base method.
func (m *MockSsoService) GetMe(ctx context.Context, accessToken string) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMe", ctx, accessToken)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMe indicates an expected call of GetMe.
func (mr *MockSsoServiceMockRecorder) GetMe(ctx, accessToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMe", reflect.TypeOf((*MockSsoService)(nil).GetMe), ctx, accessToken)
}

// GetUserByEmail mocks base method.
func (m *MockSsoService) GetUserByEmail(ctx context.Context, email string) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockSsoServiceMockRecorder) GetUserByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockSsoService)(nil).GetUserByEmail), ctx, email)
}

// GetUserByID mocks base method.
func (m *MockSsoService) GetUserByID(ctx context.Context, id uint64) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, id)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockSsoServiceMockRecorder) GetUserByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockSsoService)(nil).GetUserByID), ctx, id)
}

// GetUsers mocks base method.
func (m *MockSsoService) GetUsers(ctx context.Context, pagination *entities.Pagination) ([]entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", ctx, pagination)
	ret0, _ := ret[0].([]entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockSsoServiceMockRecorder) GetUsers(ctx, pagination any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockSsoService)(nil).GetUsers), ctx, pagination)
}

// LoginUser mocks base method.
func (m *MockSsoService) LoginUser(ctx context.Context, userData entities.LoginUserDTO) (*entities.TokensDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginUser", ctx, userData)
	ret0, _ := ret[0].(*entities.TokensDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginUser indicates an expected call of LoginUser.
func (mr *MockSsoServiceMockRecorder) LoginUser(ctx, userData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginUser", reflect.TypeOf((*MockSsoService)(nil).LoginUser), ctx, userData)
}

// LogoutUser mocks base method.
func (m *MockSsoService) LogoutUser(ctx context.Context, accessToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogoutUser", ctx, accessToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogoutUser indicates an expected call of LogoutUser.
func (mr *MockSsoServiceMockRecorder) LogoutUser(ctx, accessToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogoutUser", reflect.TypeOf((*MockSsoService)(nil).LogoutUser), ctx, accessToken)
}

// RefreshTokens mocks base method.
func (m *MockSsoService) RefreshTokens(ctx context.Context, refreshToken string) (*entities.TokensDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshTokens", ctx, refreshToken)
	ret0, _ := ret[0].(*entities.TokensDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshTokens indicates an expected call of RefreshTokens.
func (mr *MockSsoServiceMockRecorder) RefreshTokens(ctx, refreshToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshTokens", reflect.TypeOf((*MockSsoService)(nil).RefreshTokens), ctx, refreshToken)
}

// RegisterUser mocks base method.
func (m *MockSsoService) RegisterUser(ctx context.Context, userData entities.RegisterUserDTO) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", ctx, userData)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockSsoServiceMockRecorder) RegisterUser(ctx, userData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockSsoService)(nil).RegisterUser), ctx, userData)
}

// SendForgetPasswordMessage mocks base method.
func (m *MockSsoService) SendForgetPasswordMessage(ctx context.Context, email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendForgetPasswordMessage", ctx, email)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendForgetPasswordMessage indicates an expected call of SendForgetPasswordMessage.
func (mr *MockSsoServiceMockRecorder) SendForgetPasswordMessage(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendForgetPasswordMessage", reflect.TypeOf((*MockSsoService)(nil).SendForgetPasswordMessage), ctx, email)
}

// SendVerifyEmailMessage mocks base method.
func (m *MockSsoService) SendVerifyEmailMessage(ctx context.Context, email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendVerifyEmailMessage", ctx, email)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendVerifyEmailMessage indicates an expected call of SendVerifyEmailMessage.
func (mr *MockSsoServiceMockRecorder) SendVerifyEmailMessage(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendVerifyEmailMessage", reflect.TypeOf((*MockSsoService)(nil).SendVerifyEmailMessage), ctx, email)
}

// UpdateUserProfile mocks base method.
func (m *MockSsoService) UpdateUserProfile(ctx context.Context, userProfileData entities.UpdateUserProfileDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserProfile", ctx, userProfileData)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserProfile indicates an expected call of UpdateUserProfile.
func (mr *MockSsoServiceMockRecorder) UpdateUserProfile(ctx, userProfileData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserProfile", reflect.TypeOf((*MockSsoService)(nil).UpdateUserProfile), ctx, userProfileData)
}

// VerifyUserEmail mocks base method.
func (m *MockSsoService) VerifyUserEmail(ctx context.Context, verifyEmailToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyUserEmail", ctx, verifyEmailToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyUserEmail indicates an expected call of VerifyUserEmail.
func (mr *MockSsoServiceMockRecorder) VerifyUserEmail(ctx, verifyEmailToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyUserEmail", reflect.TypeOf((*MockSsoService)(nil).VerifyUserEmail), ctx, verifyEmailToken)
}
