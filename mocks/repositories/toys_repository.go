// Code generated by MockGen. DO NOT EDIT.
// Source: repositories.go
//
// Generated by this command:
//
//	mockgen -source=repositories.go -destination=../../mocks/repositories/toys_repository.go -package=mockrepositories -exclude_interfaces=SsoRepository,FileStorageRepository,TicketsRepository,NotificationsRepository
//

// Package mockrepositories is a generated GoMock package.
package mockrepositories

import (
	context "context"
	reflect "reflect"

	entities "github.com/DKhorkov/hmtm-bff/internal/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockToysRepository is a mock of ToysRepository interface.
type MockToysRepository struct {
	ctrl     *gomock.Controller
	recorder *MockToysRepositoryMockRecorder
	isgomock struct{}
}

// MockToysRepositoryMockRecorder is the mock recorder for MockToysRepository.
type MockToysRepositoryMockRecorder struct {
	mock *MockToysRepository
}

// NewMockToysRepository creates a new mock instance.
func NewMockToysRepository(ctrl *gomock.Controller) *MockToysRepository {
	mock := &MockToysRepository{ctrl: ctrl}
	mock.recorder = &MockToysRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockToysRepository) EXPECT() *MockToysRepositoryMockRecorder {
	return m.recorder
}

// AddToy mocks base method.
func (m *MockToysRepository) AddToy(ctx context.Context, toyData entities.AddToyDTO) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToy", ctx, toyData)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddToy indicates an expected call of AddToy.
func (mr *MockToysRepositoryMockRecorder) AddToy(ctx, toyData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToy", reflect.TypeOf((*MockToysRepository)(nil).AddToy), ctx, toyData)
}

// CountToys mocks base method.
func (m *MockToysRepository) CountToys(ctx context.Context) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountToys", ctx)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountToys indicates an expected call of CountToys.
func (mr *MockToysRepositoryMockRecorder) CountToys(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountToys", reflect.TypeOf((*MockToysRepository)(nil).CountToys), ctx)
}

// CreateTags mocks base method.
func (m *MockToysRepository) CreateTags(ctx context.Context, tagsData []entities.CreateTagDTO) ([]uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTags", ctx, tagsData)
	ret0, _ := ret[0].([]uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTags indicates an expected call of CreateTags.
func (mr *MockToysRepositoryMockRecorder) CreateTags(ctx, tagsData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTags", reflect.TypeOf((*MockToysRepository)(nil).CreateTags), ctx, tagsData)
}

// DeleteToy mocks base method.
func (m *MockToysRepository) DeleteToy(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteToy", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteToy indicates an expected call of DeleteToy.
func (mr *MockToysRepositoryMockRecorder) DeleteToy(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteToy", reflect.TypeOf((*MockToysRepository)(nil).DeleteToy), ctx, id)
}

// GetAllCategories mocks base method.
func (m *MockToysRepository) GetAllCategories(ctx context.Context) ([]entities.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCategories", ctx)
	ret0, _ := ret[0].([]entities.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCategories indicates an expected call of GetAllCategories.
func (mr *MockToysRepositoryMockRecorder) GetAllCategories(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCategories", reflect.TypeOf((*MockToysRepository)(nil).GetAllCategories), ctx)
}

// GetAllTags mocks base method.
func (m *MockToysRepository) GetAllTags(ctx context.Context) ([]entities.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTags", ctx)
	ret0, _ := ret[0].([]entities.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTags indicates an expected call of GetAllTags.
func (mr *MockToysRepositoryMockRecorder) GetAllTags(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTags", reflect.TypeOf((*MockToysRepository)(nil).GetAllTags), ctx)
}

// GetCategoryByID mocks base method.
func (m *MockToysRepository) GetCategoryByID(ctx context.Context, id uint32) (*entities.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryByID", ctx, id)
	ret0, _ := ret[0].(*entities.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoryByID indicates an expected call of GetCategoryByID.
func (mr *MockToysRepositoryMockRecorder) GetCategoryByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryByID", reflect.TypeOf((*MockToysRepository)(nil).GetCategoryByID), ctx, id)
}

// GetMasterByID mocks base method.
func (m *MockToysRepository) GetMasterByID(ctx context.Context, id uint64) (*entities.Master, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMasterByID", ctx, id)
	ret0, _ := ret[0].(*entities.Master)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMasterByID indicates an expected call of GetMasterByID.
func (mr *MockToysRepositoryMockRecorder) GetMasterByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMasterByID", reflect.TypeOf((*MockToysRepository)(nil).GetMasterByID), ctx, id)
}

// GetMasterByUserID mocks base method.
func (m *MockToysRepository) GetMasterByUserID(ctx context.Context, userID uint64) (*entities.Master, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMasterByUserID", ctx, userID)
	ret0, _ := ret[0].(*entities.Master)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMasterByUserID indicates an expected call of GetMasterByUserID.
func (mr *MockToysRepositoryMockRecorder) GetMasterByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMasterByUserID", reflect.TypeOf((*MockToysRepository)(nil).GetMasterByUserID), ctx, userID)
}

// GetMasterToys mocks base method.
func (m *MockToysRepository) GetMasterToys(ctx context.Context, masterID uint64, pagination *entities.Pagination) ([]entities.Toy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMasterToys", ctx, masterID, pagination)
	ret0, _ := ret[0].([]entities.Toy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMasterToys indicates an expected call of GetMasterToys.
func (mr *MockToysRepositoryMockRecorder) GetMasterToys(ctx, masterID, pagination any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMasterToys", reflect.TypeOf((*MockToysRepository)(nil).GetMasterToys), ctx, masterID, pagination)
}

// GetMasters mocks base method.
func (m *MockToysRepository) GetMasters(ctx context.Context, pagination *entities.Pagination) ([]entities.Master, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMasters", ctx, pagination)
	ret0, _ := ret[0].([]entities.Master)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMasters indicates an expected call of GetMasters.
func (mr *MockToysRepositoryMockRecorder) GetMasters(ctx, pagination any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMasters", reflect.TypeOf((*MockToysRepository)(nil).GetMasters), ctx, pagination)
}

// GetTagByID mocks base method.
func (m *MockToysRepository) GetTagByID(ctx context.Context, id uint32) (*entities.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTagByID", ctx, id)
	ret0, _ := ret[0].(*entities.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagByID indicates an expected call of GetTagByID.
func (mr *MockToysRepositoryMockRecorder) GetTagByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagByID", reflect.TypeOf((*MockToysRepository)(nil).GetTagByID), ctx, id)
}

// GetToyByID mocks base method.
func (m *MockToysRepository) GetToyByID(ctx context.Context, id uint64) (*entities.Toy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToyByID", ctx, id)
	ret0, _ := ret[0].(*entities.Toy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetToyByID indicates an expected call of GetToyByID.
func (mr *MockToysRepositoryMockRecorder) GetToyByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToyByID", reflect.TypeOf((*MockToysRepository)(nil).GetToyByID), ctx, id)
}

// GetToys mocks base method.
func (m *MockToysRepository) GetToys(ctx context.Context, pagination *entities.Pagination) ([]entities.Toy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToys", ctx, pagination)
	ret0, _ := ret[0].([]entities.Toy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetToys indicates an expected call of GetToys.
func (mr *MockToysRepositoryMockRecorder) GetToys(ctx, pagination any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToys", reflect.TypeOf((*MockToysRepository)(nil).GetToys), ctx, pagination)
}

// GetUserToys mocks base method.
func (m *MockToysRepository) GetUserToys(ctx context.Context, userID uint64, pagination *entities.Pagination) ([]entities.Toy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserToys", ctx, userID, pagination)
	ret0, _ := ret[0].([]entities.Toy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserToys indicates an expected call of GetUserToys.
func (mr *MockToysRepositoryMockRecorder) GetUserToys(ctx, userID, pagination any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserToys", reflect.TypeOf((*MockToysRepository)(nil).GetUserToys), ctx, userID, pagination)
}

// RegisterMaster mocks base method.
func (m *MockToysRepository) RegisterMaster(ctx context.Context, masterData entities.RegisterMasterDTO) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterMaster", ctx, masterData)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterMaster indicates an expected call of RegisterMaster.
func (mr *MockToysRepositoryMockRecorder) RegisterMaster(ctx, masterData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterMaster", reflect.TypeOf((*MockToysRepository)(nil).RegisterMaster), ctx, masterData)
}

// UpdateMaster mocks base method.
func (m *MockToysRepository) UpdateMaster(ctx context.Context, masterData entities.UpdateMasterDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMaster", ctx, masterData)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMaster indicates an expected call of UpdateMaster.
func (mr *MockToysRepositoryMockRecorder) UpdateMaster(ctx, masterData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMaster", reflect.TypeOf((*MockToysRepository)(nil).UpdateMaster), ctx, masterData)
}

// UpdateToy mocks base method.
func (m *MockToysRepository) UpdateToy(ctx context.Context, toyData entities.UpdateToyDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateToy", ctx, toyData)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateToy indicates an expected call of UpdateToy.
func (mr *MockToysRepositoryMockRecorder) UpdateToy(ctx, toyData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateToy", reflect.TypeOf((*MockToysRepository)(nil).UpdateToy), ctx, toyData)
}
