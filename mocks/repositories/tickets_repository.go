// Code generated by MockGen. DO NOT EDIT.
// Source: repositories.go
//
// Generated by this command:
//
//	mockgen -source=repositories.go -destination=../../mocks/repositories/tickets_repository.go -package=mockrepositories -exclude_interfaces=ToysRepository,FileStorageRepository,SsoRepository,NotificationsRepository
//

// Package mockrepositories is a generated GoMock package.
package mockrepositories

import (
	context "context"
	reflect "reflect"

	entities "github.com/DKhorkov/hmtm-bff/internal/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockTicketsRepository is a mock of TicketsRepository interface.
type MockTicketsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTicketsRepositoryMockRecorder
	isgomock struct{}
}

// MockTicketsRepositoryMockRecorder is the mock recorder for MockTicketsRepository.
type MockTicketsRepositoryMockRecorder struct {
	mock *MockTicketsRepository
}

// NewMockTicketsRepository creates a new mock instance.
func NewMockTicketsRepository(ctrl *gomock.Controller) *MockTicketsRepository {
	mock := &MockTicketsRepository{ctrl: ctrl}
	mock.recorder = &MockTicketsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTicketsRepository) EXPECT() *MockTicketsRepositoryMockRecorder {
	return m.recorder
}

// CountTickets mocks base method.
func (m *MockTicketsRepository) CountTickets(ctx context.Context, filters *entities.TicketsFilters) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountTickets", ctx, filters)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountTickets indicates an expected call of CountTickets.
func (mr *MockTicketsRepositoryMockRecorder) CountTickets(ctx, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountTickets", reflect.TypeOf((*MockTicketsRepository)(nil).CountTickets), ctx, filters)
}

// CountUserTickets mocks base method.
func (m *MockTicketsRepository) CountUserTickets(ctx context.Context, userID uint64, filters *entities.TicketsFilters) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountUserTickets", ctx, userID, filters)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountUserTickets indicates an expected call of CountUserTickets.
func (mr *MockTicketsRepositoryMockRecorder) CountUserTickets(ctx, userID, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountUserTickets", reflect.TypeOf((*MockTicketsRepository)(nil).CountUserTickets), ctx, userID, filters)
}

// CreateTicket mocks base method.
func (m *MockTicketsRepository) CreateTicket(ctx context.Context, ticketData entities.CreateTicketDTO) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTicket", ctx, ticketData)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTicket indicates an expected call of CreateTicket.
func (mr *MockTicketsRepositoryMockRecorder) CreateTicket(ctx, ticketData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTicket", reflect.TypeOf((*MockTicketsRepository)(nil).CreateTicket), ctx, ticketData)
}

// DeleteRespond mocks base method.
func (m *MockTicketsRepository) DeleteRespond(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRespond", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRespond indicates an expected call of DeleteRespond.
func (mr *MockTicketsRepositoryMockRecorder) DeleteRespond(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRespond", reflect.TypeOf((*MockTicketsRepository)(nil).DeleteRespond), ctx, id)
}

// DeleteTicket mocks base method.
func (m *MockTicketsRepository) DeleteTicket(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTicket", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTicket indicates an expected call of DeleteTicket.
func (mr *MockTicketsRepositoryMockRecorder) DeleteTicket(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTicket", reflect.TypeOf((*MockTicketsRepository)(nil).DeleteTicket), ctx, id)
}

// GetRespondByID mocks base method.
func (m *MockTicketsRepository) GetRespondByID(ctx context.Context, id uint64) (*entities.Respond, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRespondByID", ctx, id)
	ret0, _ := ret[0].(*entities.Respond)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRespondByID indicates an expected call of GetRespondByID.
func (mr *MockTicketsRepositoryMockRecorder) GetRespondByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRespondByID", reflect.TypeOf((*MockTicketsRepository)(nil).GetRespondByID), ctx, id)
}

// GetTicketByID mocks base method.
func (m *MockTicketsRepository) GetTicketByID(ctx context.Context, id uint64) (*entities.RawTicket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTicketByID", ctx, id)
	ret0, _ := ret[0].(*entities.RawTicket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTicketByID indicates an expected call of GetTicketByID.
func (mr *MockTicketsRepositoryMockRecorder) GetTicketByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTicketByID", reflect.TypeOf((*MockTicketsRepository)(nil).GetTicketByID), ctx, id)
}

// GetTicketResponds mocks base method.
func (m *MockTicketsRepository) GetTicketResponds(ctx context.Context, ticketID uint64) ([]entities.Respond, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTicketResponds", ctx, ticketID)
	ret0, _ := ret[0].([]entities.Respond)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTicketResponds indicates an expected call of GetTicketResponds.
func (mr *MockTicketsRepositoryMockRecorder) GetTicketResponds(ctx, ticketID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTicketResponds", reflect.TypeOf((*MockTicketsRepository)(nil).GetTicketResponds), ctx, ticketID)
}

// GetTickets mocks base method.
func (m *MockTicketsRepository) GetTickets(ctx context.Context, pagination *entities.Pagination, filters *entities.TicketsFilters) ([]entities.RawTicket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTickets", ctx, pagination, filters)
	ret0, _ := ret[0].([]entities.RawTicket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTickets indicates an expected call of GetTickets.
func (mr *MockTicketsRepositoryMockRecorder) GetTickets(ctx, pagination, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTickets", reflect.TypeOf((*MockTicketsRepository)(nil).GetTickets), ctx, pagination, filters)
}

// GetUserResponds mocks base method.
func (m *MockTicketsRepository) GetUserResponds(ctx context.Context, userID uint64) ([]entities.Respond, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserResponds", ctx, userID)
	ret0, _ := ret[0].([]entities.Respond)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserResponds indicates an expected call of GetUserResponds.
func (mr *MockTicketsRepositoryMockRecorder) GetUserResponds(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserResponds", reflect.TypeOf((*MockTicketsRepository)(nil).GetUserResponds), ctx, userID)
}

// GetUserTickets mocks base method.
func (m *MockTicketsRepository) GetUserTickets(ctx context.Context, userID uint64, pagination *entities.Pagination, filters *entities.TicketsFilters) ([]entities.RawTicket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserTickets", ctx, userID, pagination, filters)
	ret0, _ := ret[0].([]entities.RawTicket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserTickets indicates an expected call of GetUserTickets.
func (mr *MockTicketsRepositoryMockRecorder) GetUserTickets(ctx, userID, pagination, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserTickets", reflect.TypeOf((*MockTicketsRepository)(nil).GetUserTickets), ctx, userID, pagination, filters)
}

// RespondToTicket mocks base method.
func (m *MockTicketsRepository) RespondToTicket(ctx context.Context, respondData entities.RespondToTicketDTO) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RespondToTicket", ctx, respondData)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RespondToTicket indicates an expected call of RespondToTicket.
func (mr *MockTicketsRepositoryMockRecorder) RespondToTicket(ctx, respondData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RespondToTicket", reflect.TypeOf((*MockTicketsRepository)(nil).RespondToTicket), ctx, respondData)
}

// UpdateRespond mocks base method.
func (m *MockTicketsRepository) UpdateRespond(ctx context.Context, respondData entities.UpdateRespondDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRespond", ctx, respondData)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRespond indicates an expected call of UpdateRespond.
func (mr *MockTicketsRepositoryMockRecorder) UpdateRespond(ctx, respondData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRespond", reflect.TypeOf((*MockTicketsRepository)(nil).UpdateRespond), ctx, respondData)
}

// UpdateTicket mocks base method.
func (m *MockTicketsRepository) UpdateTicket(ctx context.Context, ticketData entities.UpdateTicketDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTicket", ctx, ticketData)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTicket indicates an expected call of UpdateTicket.
func (mr *MockTicketsRepositoryMockRecorder) UpdateTicket(ctx, ticketData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTicket", reflect.TypeOf((*MockTicketsRepository)(nil).UpdateTicket), ctx, ticketData)
}
