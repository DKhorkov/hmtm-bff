// Code generated by MockGen. DO NOT EDIT.
// Source: repositories.go
//
// Generated by this command:
//
//	mockgen -source=repositories.go -destination=../../mocks/repositories/file_storage_repository.go -package=mockrepositories -exclude_interfaces=ToysRepository,SsoRepository,TicketsRepository,NotificationsRepository
//

// Package mockrepositories is a generated GoMock package.
package mockrepositories

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFileStorageRepository is a mock of FileStorageRepository interface.
type MockFileStorageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFileStorageRepositoryMockRecorder
	isgomock struct{}
}

// MockFileStorageRepositoryMockRecorder is the mock recorder for MockFileStorageRepository.
type MockFileStorageRepositoryMockRecorder struct {
	mock *MockFileStorageRepository
}

// NewMockFileStorageRepository creates a new mock instance.
func NewMockFileStorageRepository(ctrl *gomock.Controller) *MockFileStorageRepository {
	mock := &MockFileStorageRepository{ctrl: ctrl}
	mock.recorder = &MockFileStorageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileStorageRepository) EXPECT() *MockFileStorageRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockFileStorageRepository) Delete(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockFileStorageRepositoryMockRecorder) Delete(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockFileStorageRepository)(nil).Delete), ctx, key)
}

// DeleteMany mocks base method.
func (m *MockFileStorageRepository) DeleteMany(ctx context.Context, keys []string) []error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMany", ctx, keys)
	ret0, _ := ret[0].([]error)
	return ret0
}

// DeleteMany indicates an expected call of DeleteMany.
func (mr *MockFileStorageRepositoryMockRecorder) DeleteMany(ctx, keys any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMany", reflect.TypeOf((*MockFileStorageRepository)(nil).DeleteMany), ctx, keys)
}

// Upload mocks base method.
func (m *MockFileStorageRepository) Upload(ctx context.Context, key string, file []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", ctx, key, file)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upload indicates an expected call of Upload.
func (mr *MockFileStorageRepositoryMockRecorder) Upload(ctx, key, file any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockFileStorageRepository)(nil).Upload), ctx, key, file)
}
