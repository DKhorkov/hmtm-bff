package graphqlcontroller

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"
	"fmt"
	"net/http"
	"strconv"

	"github.com/DKhorkov/libs/contextlib"
	"github.com/DKhorkov/libs/cookies"
	"github.com/DKhorkov/libs/logging"
	"github.com/DKhorkov/libs/middlewares"
	"github.com/DKhorkov/libs/pointers"

	graphqlapi "github.com/DKhorkov/hmtm-bff/api/graphql"
	"github.com/DKhorkov/hmtm-bff/internal/entities"
	customerrors "github.com/DKhorkov/hmtm-bff/internal/errors"
)

// User is the resolver for the user field.
func (r *emailResolver) User(ctx context.Context, obj *entities.Email) (*entities.User, error) {
	if obj == nil {
		return nil, nil
	}

	user, err := r.useCases.GetUserByID(ctx, obj.UserID)
	if err != nil {
		logging.LogErrorContext(
			ctx,
			r.logger,
			fmt.Sprintf("Failed to get User for Email Communication with ID=%d", obj.ID),
			err,
		)
	}

	return user, err
}

// User is the resolver for the user field.
func (r *masterResolver) User(ctx context.Context, obj *entities.Master) (*entities.User, error) {
	if obj == nil {
		return nil, nil
	}

	user, err := r.useCases.GetUserByID(ctx, obj.UserID)
	if err != nil {
		logging.LogErrorContext(
			ctx,
			r.logger,
			fmt.Sprintf("Failed to get User for Master with ID=%d", obj.ID),
			err,
		)
	}

	return user, err
}

// RegisterUser is the resolver for the register field.
func (r *mutationResolver) RegisterUser(ctx context.Context, input graphqlapi.RegisterUserInput) (string, error) {
	userData := entities.RegisterUserDTO{
		DisplayName: input.DisplayName,
		Email:       input.Email,
		Password:    input.Password,
	}

	userID, err := r.useCases.RegisterUser(ctx, userData)

	return strconv.FormatUint(userID, 10), err
}

// LoginUser is the resolver for the login field.
func (r *mutationResolver) LoginUser(ctx context.Context, input graphqlapi.LoginUserInput) (bool, error) {
	user, err := r.useCases.GetUserByEmail(ctx, input.Email)
	if err != nil {
		return false, err
	}

	if !user.EmailConfirmed {
		return false, &customerrors.PermissionDeniedError{
			Message: fmt.Sprintf("User with Email=%s has not confirmed it", input.Email),
		}
	}

	userData := entities.LoginUserDTO{
		Email:    input.Email,
		Password: input.Password,
	}

	tokens, err := r.useCases.LoginUser(ctx, userData)
	if err != nil {
		return false, err
	}

	writer, err := contextlib.ValueFromContext[http.ResponseWriter](
		ctx,
		middlewares.CookiesWriterName,
	)
	if err != nil {
		logging.LogErrorContext(ctx, r.logger, "Failed to get cookies writer", err)

		return false, &contextlib.ValueNotFoundError{Message: middlewares.CookiesWriterName}
	}

	cookies.Set(writer, accessTokenCookieName, tokens.AccessToken, r.cookiesConfig.AccessToken)
	cookies.Set(writer, refreshTokenCookieName, tokens.RefreshToken, r.cookiesConfig.RefreshToken)

	return true, nil
}

// LogoutUser is the resolver for the logout field.
func (r *mutationResolver) LogoutUser(ctx context.Context) (bool, error) {
	accessToken, err := contextlib.ValueFromContext[*http.Cookie](ctx, accessTokenCookieName)
	if err != nil {
		return false, &cookies.NotFoundError{Message: accessTokenCookieName}
	}

	err = r.useCases.LogoutUser(ctx, accessToken.Value)
	if err != nil {
		return false, err
	}

	writer, err := contextlib.ValueFromContext[http.ResponseWriter](
		ctx,
		middlewares.CookiesWriterName,
	)
	if err != nil {
		logging.LogErrorContext(ctx, r.logger, "Failed to get cookies writer", err)

		return false, &contextlib.ValueNotFoundError{Message: middlewares.CookiesWriterName}
	}

	// Deleting cookies:
	cookies.Set(writer, accessTokenCookieName, "", cookies.Config{MaxAge: -1})
	cookies.Set(writer, refreshTokenCookieName, "", cookies.Config{MaxAge: -1})

	return true, nil
}

// RefreshTokens is the resolver for the refreshTokens field.
func (r *mutationResolver) RefreshTokens(ctx context.Context) (bool, error) {
	refreshToken, err := contextlib.ValueFromContext[*http.Cookie](ctx, refreshTokenCookieName)
	if err != nil {
		return false, &cookies.NotFoundError{Message: refreshTokenCookieName}
	}

	tokens, err := r.useCases.RefreshTokens(ctx, refreshToken.Value)
	if err != nil {
		return false, err
	}

	writer, err := contextlib.ValueFromContext[http.ResponseWriter](
		ctx,
		middlewares.CookiesWriterName,
	)
	if err != nil {
		logging.LogErrorContext(ctx, r.logger, "Failed to get cookies writer", err)

		return false, &contextlib.ValueNotFoundError{Message: middlewares.CookiesWriterName}
	}

	cookies.Set(writer, accessTokenCookieName, tokens.AccessToken, r.cookiesConfig.AccessToken)
	cookies.Set(writer, refreshTokenCookieName, tokens.RefreshToken, r.cookiesConfig.RefreshToken)

	return true, nil
}

// VerifyUserEmail is the resolver for the verifyEmail field.
func (r *mutationResolver) VerifyUserEmail(ctx context.Context, input graphqlapi.VerifyUserEmailInput) (bool, error) {
	if err := r.useCases.VerifyUserEmail(ctx, input.VerifyEmailToken); err != nil {
		return false, err
	}

	return true, nil
}

// SendVerifyEmailMessage is the resolver for the sendVerifyEmailMessage field.
func (r *mutationResolver) SendVerifyEmailMessage(ctx context.Context, input graphqlapi.SendVerifyEmailMessageInput) (bool, error) {
	if err := r.useCases.SendVerifyEmailMessage(ctx, input.Email); err != nil {
		return false, err
	}

	return true, nil
}

// ForgetPassword is the resolver for the forgetPassword field.
func (r *mutationResolver) ForgetPassword(ctx context.Context, input graphqlapi.ForgetPasswordInput) (bool, error) {
	if err := r.useCases.ForgetPassword(ctx, input.ForgetPasswordToken, input.NewPassword); err != nil {
		return false, err
	}

	return true, nil
}

// SendForgetPasswordMessage is the resolver for the sendForgetPasswordMessage field.
func (r *mutationResolver) SendForgetPasswordMessage(ctx context.Context, input graphqlapi.SendForgetPasswordMessageInput) (bool, error) {
	if err := r.useCases.SendForgetPasswordMessage(ctx, input.Email); err != nil {
		return false, err
	}

	return true, nil
}

// ChangePassword is the resolver for the changePassword field.
func (r *mutationResolver) ChangePassword(ctx context.Context, input graphqlapi.ChangePasswordInput) (bool, error) {
	accessToken, err := contextlib.ValueFromContext[*http.Cookie](ctx, accessTokenCookieName)
	if err != nil {
		return false, &cookies.NotFoundError{Message: accessTokenCookieName}
	}

	if err = r.useCases.ChangePassword(ctx, accessToken.Value, input.OldPassword, input.NewPassword); err != nil {
		return false, err
	}

	return true, nil
}

// UpdateUserProfile is the resolver for the updateUserProfile field.
func (r *mutationResolver) UpdateUserProfile(ctx context.Context, input graphqlapi.UpdateUserProfileInput) (bool, error) {
	accessToken, err := contextlib.ValueFromContext[*http.Cookie](ctx, accessTokenCookieName)
	if err != nil {
		return false, &cookies.NotFoundError{Message: accessTokenCookieName}
	}

	userProfileData := entities.RawUpdateUserProfileDTO{
		AccessToken: accessToken.Value,
		DisplayName: input.DisplayName,
		Phone:       input.Phone,
		Telegram:    input.Telegram,
		Avatar:      input.Avatar,
	}

	if err = r.useCases.UpdateUserProfile(ctx, userProfileData); err != nil {
		return false, err
	}

	return true, nil
}

// RegisterMaster is the resolver for the registerMaster field.
func (r *mutationResolver) RegisterMaster(ctx context.Context, input graphqlapi.RegisterMasterInput) (string, error) {
	accessToken, err := contextlib.ValueFromContext[*http.Cookie](ctx, accessTokenCookieName)
	if err != nil {
		return "", &cookies.NotFoundError{Message: accessTokenCookieName}
	}

	masterData := entities.RawRegisterMasterDTO{
		AccessToken: accessToken.Value,
		Info:        input.Info,
	}

	masterID, err := r.useCases.RegisterMaster(ctx, masterData)

	return strconv.FormatUint(masterID, 10), err
}

// UpdateMaster is the resolver for the updateMaster field.
func (r *mutationResolver) UpdateMaster(ctx context.Context, input graphqlapi.UpdateMasterInput) (bool, error) {
	accessToken, err := contextlib.ValueFromContext[*http.Cookie](ctx, accessTokenCookieName)
	if err != nil {
		return false, &cookies.NotFoundError{Message: accessTokenCookieName}
	}

	masterID, err := strconv.Atoi(input.ID)
	if err != nil {
		return false, err
	}

	masterData := entities.RawUpdateMasterDTO{
		AccessToken: accessToken.Value,
		ID:          uint64(masterID),
		Info:        input.Info,
	}

	if err = r.useCases.UpdateMaster(ctx, masterData); err != nil {
		return false, err
	}

	return true, nil
}

// AddToy is the resolver for the addToy field.
func (r *mutationResolver) AddToy(ctx context.Context, input graphqlapi.AddToyInput) (string, error) {
	accessToken, err := contextlib.ValueFromContext[*http.Cookie](ctx, accessTokenCookieName)
	if err != nil {
		return "", &cookies.NotFoundError{Message: accessTokenCookieName}
	}

	categoryID, err := strconv.Atoi(input.CategoryID)
	if err != nil {
		return "", err
	}

	toyData := entities.RawAddToyDTO{
		AccessToken: accessToken.Value,
		CategoryID:  uint32(categoryID),
		Name:        input.Name,
		Description: input.Description,
		Price:       float32(input.Price),
		Quantity:    uint32(input.Quantity),
		Tags:        input.Tags,
		Attachments: input.Attachments,
	}

	toyID, err := r.useCases.AddToy(ctx, toyData)

	return strconv.FormatUint(toyID, 10), err
}

// UpdateToy is the resolver for the updateToy field.
func (r *mutationResolver) UpdateToy(ctx context.Context, input graphqlapi.UpdateToyInput) (bool, error) {
	accessToken, err := contextlib.ValueFromContext[*http.Cookie](ctx, accessTokenCookieName)
	if err != nil {
		return false, &cookies.NotFoundError{Message: accessTokenCookieName}
	}

	toyID, err := strconv.Atoi(input.ID)
	if err != nil {
		return false, err
	}

	var categoryID *uint32

	if input.CategoryID != nil {
		intCategoryID, err := strconv.Atoi(*input.CategoryID)
		if err != nil {
			return false, err
		}

		categoryID = pointers.New[uint32](uint32(intCategoryID))
	}

	var price *float32
	if input.Price != nil {
		price = pointers.New[float32](float32(*input.Price))
	}

	var quantity *uint32
	if input.Quantity != nil {
		quantity = pointers.New[uint32](uint32(*input.Quantity))
	}

	toyData := entities.RawUpdateToyDTO{
		AccessToken: accessToken.Value,
		ID:          uint64(toyID),
		Name:        input.Name,
		CategoryID:  categoryID,
		Description: input.Description,
		Price:       price,
		Quantity:    quantity,
		Tags:        input.Tags,
		Attachments: input.Attachments,
	}

	if err = r.useCases.UpdateToy(ctx, toyData); err != nil {
		return false, err
	}

	return true, nil
}

// DeleteToy is the resolver for the deleteToy field.
func (r *mutationResolver) DeleteToy(ctx context.Context, input graphqlapi.DeleteToyInput) (bool, error) {
	accessToken, err := contextlib.ValueFromContext[*http.Cookie](ctx, accessTokenCookieName)
	if err != nil {
		return false, &cookies.NotFoundError{Message: accessTokenCookieName}
	}

	toyID, err := strconv.Atoi(input.ID)
	if err != nil {
		return false, err
	}

	if err = r.useCases.DeleteToy(ctx, accessToken.Value, uint64(toyID)); err != nil {
		return false, err
	}

	return true, nil
}

// CreateTicket is the resolver for the createTicket field.
func (r *mutationResolver) CreateTicket(ctx context.Context, input graphqlapi.CreateTicketInput) (string, error) {
	accessToken, err := contextlib.ValueFromContext[*http.Cookie](ctx, accessTokenCookieName)
	if err != nil {
		return "", &cookies.NotFoundError{Message: accessTokenCookieName}
	}

	categoryID, err := strconv.Atoi(input.CategoryID)
	if err != nil {
		return "", err
	}

	var price *float32
	if input.Price != nil {
		price = pointers.New[float32](float32(*input.Price))
	}

	ticketData := entities.RawCreateTicketDTO{
		AccessToken: accessToken.Value,
		CategoryID:  uint32(categoryID),
		Name:        input.Name,
		Description: input.Description,
		Price:       price,
		Quantity:    uint32(input.Quantity),
		Tags:        input.Tags,
		Attachments: input.Attachments,
	}

	ticketID, err := r.useCases.CreateTicket(ctx, ticketData)

	return strconv.FormatUint(ticketID, 10), err
}

// RespondToTicket is the resolver for the respondToTicket field.
func (r *mutationResolver) RespondToTicket(ctx context.Context, input graphqlapi.RespondToTicketInput) (string, error) {
	accessToken, err := contextlib.ValueFromContext[*http.Cookie](ctx, accessTokenCookieName)
	if err != nil {
		return "", &cookies.NotFoundError{Message: accessTokenCookieName}
	}

	ticketID, err := strconv.Atoi(input.TicketID)
	if err != nil {
		return "", err
	}

	respondData := entities.RawRespondToTicketDTO{
		AccessToken: accessToken.Value,
		TicketID:    uint64(ticketID),
		Price:       float32(input.Price),
		Comment:     input.Comment,
	}

	respondID, err := r.useCases.RespondToTicket(ctx, respondData)

	return strconv.FormatUint(respondID, 10), err
}

// UpdateRespond is the resolver for the updateRespond field.
func (r *mutationResolver) UpdateRespond(ctx context.Context, input graphqlapi.UpdateRespondInput) (bool, error) {
	accessToken, err := contextlib.ValueFromContext[*http.Cookie](ctx, accessTokenCookieName)
	if err != nil {
		return false, &cookies.NotFoundError{Message: accessTokenCookieName}
	}

	respondID, err := strconv.Atoi(input.ID)
	if err != nil {
		return false, err
	}

	var price *float32
	if input.Price != nil {
		price = pointers.New[float32](float32(*input.Price))
	}

	respondData := entities.RawUpdateRespondDTO{
		AccessToken: accessToken.Value,
		ID:          uint64(respondID),
		Price:       price,
		Comment:     input.Comment,
	}

	if err = r.useCases.UpdateRespond(ctx, respondData); err != nil {
		return false, err
	}

	return true, nil
}

// DeleteRespond is the resolver for the deleteRespond field.
func (r *mutationResolver) DeleteRespond(ctx context.Context, input graphqlapi.DeleteRespondInput) (bool, error) {
	accessToken, err := contextlib.ValueFromContext[*http.Cookie](ctx, accessTokenCookieName)
	if err != nil {
		return false, &cookies.NotFoundError{Message: accessTokenCookieName}
	}

	respondID, err := strconv.Atoi(input.ID)
	if err != nil {
		return false, err
	}

	if err = r.useCases.DeleteRespond(ctx, accessToken.Value, uint64(respondID)); err != nil {
		return false, err
	}

	return true, nil
}

// UpdateTicket is the resolver for the updateTicket field.
func (r *mutationResolver) UpdateTicket(ctx context.Context, input graphqlapi.UpdateTicketInput) (bool, error) {
	accessToken, err := contextlib.ValueFromContext[*http.Cookie](ctx, accessTokenCookieName)
	if err != nil {
		return false, &cookies.NotFoundError{Message: accessTokenCookieName}
	}

	ticketID, err := strconv.Atoi(input.ID)
	if err != nil {
		return false, err
	}

	var categoryID *uint32

	if input.CategoryID != nil {
		intCategoryID, err := strconv.Atoi(*input.CategoryID)
		if err != nil {
			return false, err
		}

		categoryID = pointers.New[uint32](uint32(intCategoryID))
	}

	var price *float32
	if input.Price != nil {
		price = pointers.New[float32](float32(*input.Price))
	}

	var quantity *uint32
	if input.Quantity != nil {
		quantity = pointers.New[uint32](uint32(*input.Quantity))
	}

	ticketData := entities.RawUpdateTicketDTO{
		AccessToken: accessToken.Value,
		ID:          uint64(ticketID),
		Name:        input.Name,
		CategoryID:  categoryID,
		Description: input.Description,
		Price:       price,
		Quantity:    quantity,
		Tags:        input.Tags,
		Attachments: input.Attachments,
	}

	if err = r.useCases.UpdateTicket(ctx, ticketData); err != nil {
		return false, err
	}

	return true, nil
}

// DeleteTicket is the resolver for the deleteTicket field.
func (r *mutationResolver) DeleteTicket(ctx context.Context, input graphqlapi.DeleteTicketInput) (bool, error) {
	accessToken, err := contextlib.ValueFromContext[*http.Cookie](ctx, accessTokenCookieName)
	if err != nil {
		return false, &cookies.NotFoundError{Message: accessTokenCookieName}
	}

	ticketID, err := strconv.Atoi(input.ID)
	if err != nil {
		return false, err
	}

	if err = r.useCases.DeleteTicket(ctx, accessToken.Value, uint64(ticketID)); err != nil {
		return false, err
	}

	return true, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context, input *graphqlapi.UsersInput) ([]*entities.User, error) {
	var pagination *entities.Pagination
	if input != nil {
		pagination = input.Pagination
	}

	users, err := r.useCases.GetUsers(ctx, pagination)
	if err != nil {
		return nil, err
	}

	response := make([]*entities.User, len(users))
	for i, user := range users {
		response[i] = &user
	}

	return response, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*entities.User, error) {
	userID, err := strconv.Atoi(id)
	if err != nil {
		return nil, err
	}

	return r.useCases.GetUserByID(ctx, uint64(userID))
}

// UserByEmail is the resolver for the userByEmail field.
func (r *queryResolver) UserByEmail(ctx context.Context, email string) (*entities.User, error) {
	return r.useCases.GetUserByEmail(ctx, email)
}

// Me is the resolver for me field.
func (r *queryResolver) Me(ctx context.Context) (*entities.User, error) {
	accessToken, err := contextlib.ValueFromContext[*http.Cookie](ctx, accessTokenCookieName)
	if err != nil {
		return nil, &cookies.NotFoundError{Message: accessTokenCookieName}
	}

	return r.useCases.GetMe(ctx, accessToken.Value)
}

// Master is the resolver for the master field.
func (r *queryResolver) Master(ctx context.Context, id string) (*entities.Master, error) {
	masterID, err := strconv.Atoi(id)
	if err != nil {
		return nil, err
	}

	return r.useCases.GetMasterByID(ctx, uint64(masterID))
}

// MasterByUser is the resolver for the masterByUser field.
func (r *queryResolver) MasterByUser(ctx context.Context, userID string) (*entities.Master, error) {
	intUserID, err := strconv.Atoi(userID)
	if err != nil {
		return nil, err
	}

	return r.useCases.GetMasterByUserID(ctx, uint64(intUserID))
}

// Masters is the resolver for the masters field.
func (r *queryResolver) Masters(ctx context.Context, input *graphqlapi.MastersInput) ([]*entities.Master, error) {
	var pagination *entities.Pagination
	if input != nil {
		pagination = input.Pagination
	}

	masters, err := r.useCases.GetMasters(ctx, pagination)
	if err != nil {
		return nil, err
	}

	response := make([]*entities.Master, len(masters))
	for i, master := range masters {
		response[i] = &master
	}

	return response, nil
}

// MasterToys is the resolver for the masterToys field.
func (r *queryResolver) MasterToys(ctx context.Context, input graphqlapi.MasterToysInput) ([]*entities.Toy, error) {
	intMasterID, err := strconv.Atoi(input.MasterID)
	if err != nil {
		return nil, err
	}

	toys, err := r.useCases.GetMasterToys(ctx, uint64(intMasterID), input.Pagination, input.Filters)
	if err != nil {
		return nil, err
	}

	response := make([]*entities.Toy, len(toys))
	for i, toy := range toys {
		response[i] = &toy
	}

	return response, nil
}

// MasterToysCounter is the resolver for the masterToysCounter field.
func (r *queryResolver) MasterToysCounter(ctx context.Context, masterID string, filters *entities.ToysFilters) (int, error) {
	intMasterID, err := strconv.Atoi(masterID)
	if err != nil {
		return 0, err
	}

	count, err := r.useCases.CountMasterToys(ctx, uint64(intMasterID), filters)
	if err != nil {
		return 0, err
	}

	return int(count), nil
}

// Toy is the resolver for the toy field.
func (r *queryResolver) Toy(ctx context.Context, id string) (*entities.Toy, error) {
	toyID, err := strconv.Atoi(id)
	if err != nil {
		return nil, err
	}

	return r.useCases.GetToyByID(ctx, uint64(toyID))
}

// Toys is the resolver for the toys field.
func (r *queryResolver) Toys(ctx context.Context, input *graphqlapi.ToysInput) ([]*entities.Toy, error) {
	var pagination *entities.Pagination
	if input != nil {
		pagination = input.Pagination
	}

	var filters *entities.ToysFilters
	if input != nil {
		filters = input.Filters
	}

	toys, err := r.useCases.GetToys(ctx, pagination, filters)
	if err != nil {
		return nil, err
	}

	response := make([]*entities.Toy, len(toys))
	for i, toy := range toys {
		response[i] = &toy
	}

	return response, nil
}

// ToysCounter is the resolver for the toysCounter field.
func (r *queryResolver) ToysCounter(ctx context.Context, filters *entities.ToysFilters) (int, error) {
	count, err := r.useCases.CountToys(ctx, filters)
	if err != nil {
		return 0, err
	}

	return int(count), nil
}

// MyToys is the resolver for the myToys field.
func (r *queryResolver) MyToys(ctx context.Context, input *graphqlapi.MyToysInput) ([]*entities.Toy, error) {
	var pagination *entities.Pagination
	if input != nil {
		pagination = input.Pagination
	}

	var filters *entities.ToysFilters
	if input != nil {
		filters = input.Filters
	}

	accessToken, err := contextlib.ValueFromContext[*http.Cookie](ctx, accessTokenCookieName)
	if err != nil {
		return nil, &cookies.NotFoundError{Message: accessTokenCookieName}
	}

	toys, err := r.useCases.GetMyToys(ctx, accessToken.Value, pagination, filters)
	if err != nil {
		return nil, err
	}

	response := make([]*entities.Toy, len(toys))
	for i, toy := range toys {
		response[i] = &toy
	}

	return response, nil
}

// MyToysCounter is the resolver for the myToysCounter field.
func (r *queryResolver) MyToysCounter(ctx context.Context, filters *entities.ToysFilters) (int, error) {
	accessToken, err := contextlib.ValueFromContext[*http.Cookie](ctx, accessTokenCookieName)
	if err != nil {
		return 0, &cookies.NotFoundError{Message: accessTokenCookieName}
	}

	count, err := r.useCases.CountMyToys(ctx, accessToken.Value, filters)
	if err != nil {
		return 0, err
	}

	return int(count), nil
}

// Tag is the resolver for the tag field.
func (r *queryResolver) Tag(ctx context.Context, id string) (*entities.Tag, error) {
	tagID, err := strconv.Atoi(id)
	if err != nil {
		return nil, err
	}

	return r.useCases.GetTagByID(ctx, uint32(tagID))
}

// Tags is the resolver for the tags field.
func (r *queryResolver) Tags(ctx context.Context) ([]*entities.Tag, error) {
	tags, err := r.useCases.GetAllTags(ctx)
	if err != nil {
		return nil, err
	}

	response := make([]*entities.Tag, len(tags))
	for i, tag := range tags {
		response[i] = &tag
	}

	return response, nil
}

// Category is the resolver for the category field.
func (r *queryResolver) Category(ctx context.Context, id string) (*entities.Category, error) {
	categoryID, err := strconv.Atoi(id)
	if err != nil {
		return nil, err
	}

	return r.useCases.GetCategoryByID(ctx, uint32(categoryID))
}

// Categories is the resolver for the categories field.
func (r *queryResolver) Categories(ctx context.Context) ([]*entities.Category, error) {
	categories, err := r.useCases.GetAllCategories(ctx)
	if err != nil {
		return nil, err
	}

	response := make([]*entities.Category, len(categories))
	for i, category := range categories {
		response[i] = &category
	}

	return response, nil
}

// Ticket is the resolver for the ticket field.
func (r *queryResolver) Ticket(ctx context.Context, id string) (*entities.Ticket, error) {
	ticketID, err := strconv.Atoi(id)
	if err != nil {
		return nil, err
	}

	return r.useCases.GetTicketByID(ctx, uint64(ticketID))
}

// Tickets is the resolver for the tickets field.
func (r *queryResolver) Tickets(ctx context.Context) ([]*entities.Ticket, error) {
	tickets, err := r.useCases.GetAllTickets(ctx)
	if err != nil {
		return nil, err
	}

	response := make([]*entities.Ticket, len(tickets))
	for i, ticket := range tickets {
		response[i] = &ticket
	}

	return response, nil
}

// UserTickets is the resolver for the userTickets field.
func (r *queryResolver) UserTickets(ctx context.Context, userID string) ([]*entities.Ticket, error) {
	intUserID, err := strconv.Atoi(userID)
	if err != nil {
		return nil, err
	}

	tickets, err := r.useCases.GetUserTickets(ctx, uint64(intUserID))
	if err != nil {
		return nil, err
	}

	response := make([]*entities.Ticket, len(tickets))
	for i, ticket := range tickets {
		response[i] = &ticket
	}

	return response, nil
}

// MyTickets is the resolver for the myTickets field.
func (r *queryResolver) MyTickets(ctx context.Context) ([]*entities.Ticket, error) {
	accessToken, err := contextlib.ValueFromContext[*http.Cookie](ctx, accessTokenCookieName)
	if err != nil {
		return nil, &cookies.NotFoundError{Message: accessTokenCookieName}
	}

	tickets, err := r.useCases.GetMyTickets(ctx, accessToken.Value)
	if err != nil {
		return nil, err
	}

	response := make([]*entities.Ticket, len(tickets))
	for i, ticket := range tickets {
		response[i] = &ticket
	}

	return response, nil
}

// Respond is the resolver for the respond field.
func (r *queryResolver) Respond(ctx context.Context, id string) (*entities.Respond, error) {
	accessToken, err := contextlib.ValueFromContext[*http.Cookie](ctx, accessTokenCookieName)
	if err != nil {
		return nil, &cookies.NotFoundError{Message: accessTokenCookieName}
	}

	respondID, err := strconv.Atoi(id)
	if err != nil {
		return nil, err
	}

	return r.useCases.GetRespondByID(ctx, uint64(respondID), accessToken.Value)
}

// TicketResponds is the resolver for the ticketResponds field.
func (r *queryResolver) TicketResponds(ctx context.Context, ticketID string) ([]*entities.Respond, error) {
	accessToken, err := contextlib.ValueFromContext[*http.Cookie](ctx, accessTokenCookieName)
	if err != nil {
		return nil, &cookies.NotFoundError{Message: accessTokenCookieName}
	}

	intTicketID, err := strconv.Atoi(ticketID)
	if err != nil {
		return nil, err
	}

	responds, err := r.useCases.GetTicketResponds(ctx, uint64(intTicketID), accessToken.Value)
	if err != nil {
		return nil, err
	}

	response := make([]*entities.Respond, len(responds))
	for i, respond := range responds {
		response[i] = &respond
	}

	return response, nil
}

// MyResponds is the resolver for the myResponds field.
func (r *queryResolver) MyResponds(ctx context.Context) ([]*entities.Respond, error) {
	accessToken, err := contextlib.ValueFromContext[*http.Cookie](ctx, accessTokenCookieName)
	if err != nil {
		return nil, &cookies.NotFoundError{Message: accessTokenCookieName}
	}

	responds, err := r.useCases.GetMyResponds(ctx, accessToken.Value)
	if err != nil {
		return nil, err
	}

	response := make([]*entities.Respond, len(responds))
	for i, respond := range responds {
		response[i] = &respond
	}

	return response, nil
}

// MyEmailCommunications is the resolver for the myEmailCommunications field.
func (r *queryResolver) MyEmailCommunications(ctx context.Context) ([]*entities.Email, error) {
	accessToken, err := contextlib.ValueFromContext[*http.Cookie](ctx, accessTokenCookieName)
	if err != nil {
		return nil, &cookies.NotFoundError{Message: accessTokenCookieName}
	}

	emailCommunications, err := r.useCases.GetMyEmailCommunications(ctx, accessToken.Value)
	if err != nil {
		return nil, err
	}

	response := make([]*entities.Email, len(emailCommunications))
	for i, communication := range emailCommunications {
		response[i] = &communication
	}

	return response, nil
}

// Ticket is the resolver for the ticket field.
func (r *respondResolver) Ticket(ctx context.Context, obj *entities.Respond) (*entities.Ticket, error) {
	if obj == nil {
		return nil, nil
	}

	ticket, err := r.useCases.GetTicketByID(ctx, obj.TicketID)
	if err != nil {
		logging.LogErrorContext(
			ctx,
			r.logger,
			fmt.Sprintf("Failed to get Ticket for Respond with ID=%d", obj.ID),
			err,
		)
	}

	return ticket, err
}

// Master is the resolver for the master field.
func (r *respondResolver) Master(ctx context.Context, obj *entities.Respond) (*entities.Master, error) {
	if obj == nil {
		return nil, nil
	}

	master, err := r.useCases.GetMasterByID(ctx, obj.MasterID)
	if err != nil {
		logging.LogErrorContext(
			ctx,
			r.logger,
			fmt.Sprintf("Failed to get Master for Respond with ID=%d", obj.ID),
			err,
		)
	}

	return master, err
}

// Price is the resolver for the price field.
func (r *respondResolver) Price(ctx context.Context, obj *entities.Respond) (float64, error) {
	var price float64
	if obj != nil {
		price = float64(obj.Price)
	}

	return price, nil
}

// User is the resolver for the user field.
func (r *ticketResolver) User(ctx context.Context, obj *entities.Ticket) (*entities.User, error) {
	if obj == nil {
		return nil, nil
	}

	user, err := r.useCases.GetUserByID(ctx, obj.UserID)
	if err != nil {
		logging.LogErrorContext(
			ctx,
			r.logger,
			fmt.Sprintf("Failed to get User for Ticket with ID=%d", obj.ID),
			err,
		)
	}

	return user, err
}

// Category is the resolver for the category field.
func (r *ticketResolver) Category(ctx context.Context, obj *entities.Ticket) (*entities.Category, error) {
	if obj == nil {
		return nil, nil
	}

	category, err := r.useCases.GetCategoryByID(ctx, obj.CategoryID)
	if err != nil {
		logging.LogErrorContext(
			ctx,
			r.logger,
			fmt.Sprintf("Failed to get Category for Ticket with ID=%d", obj.ID),
			err,
		)
	}

	return category, err
}

// Price is the resolver for the price field.
func (r *ticketResolver) Price(ctx context.Context, obj *entities.Ticket) (*float64, error) {
	var price *float64
	if obj != nil && obj.Price != nil {
		price = pointers.New[float64](float64(*obj.Price))
	}

	return price, nil
}

// Quantity is the resolver for the quantity field.
func (r *ticketResolver) Quantity(ctx context.Context, obj *entities.Ticket) (int, error) {
	var quantity int
	if obj != nil {
		quantity = int(obj.Quantity)
	}

	return quantity, nil
}

// Master is the resolver for the master field.
func (r *toyResolver) Master(ctx context.Context, obj *entities.Toy) (*entities.Master, error) {
	if obj == nil {
		return nil, nil
	}

	master, err := r.useCases.GetMasterByID(ctx, obj.MasterID)
	if err != nil {
		logging.LogErrorContext(
			ctx,
			r.logger,
			fmt.Sprintf("Failed to get Master for Toy with ID=%d", obj.MasterID),
			err,
		)
	}

	return master, err
}

// Category is the resolver for the category field.
func (r *toyResolver) Category(ctx context.Context, obj *entities.Toy) (*entities.Category, error) {
	if obj == nil {
		return nil, nil
	}

	category, err := r.useCases.GetCategoryByID(ctx, obj.CategoryID)
	if err != nil {
		logging.LogErrorContext(
			ctx,
			r.logger,
			fmt.Sprintf("Failed to get Category for Toy with ID=%d", obj.ID),
			err,
		)
	}

	return category, err
}

// Price is the resolver for the price field.
func (r *toyResolver) Price(ctx context.Context, obj *entities.Toy) (float64, error) {
	var price float64
	if obj != nil {
		price = float64(obj.Price)
	}

	return price, nil
}

// Quantity is the resolver for the quantity field.
func (r *toyResolver) Quantity(ctx context.Context, obj *entities.Toy) (int, error) {
	var quantity int
	if obj != nil {
		quantity = int(obj.Quantity)
	}

	return quantity, nil
}

// Limit is the resolver for the limit field.
func (r *paginationResolver) Limit(ctx context.Context, obj *entities.Pagination, data *int) error {
	if obj != nil && data != nil {
		obj.Limit = pointers.New(uint64(*data))
	}

	return nil
}

// Offset is the resolver for the offset field.
func (r *paginationResolver) Offset(ctx context.Context, obj *entities.Pagination, data *int) error {
	if obj != nil && data != nil {
		obj.Offset = pointers.New(uint64(*data))
	}

	return nil
}

// PriceCeil is the resolver for the priceCeil field.
func (r *toysFiltersResolver) PriceCeil(ctx context.Context, obj *entities.ToysFilters, data *float64) error {
	if obj != nil && data != nil {
		obj.PriceCeil = pointers.New(float32(*data))
	}

	return nil
}

// PriceFloor is the resolver for the priceFloor field.
func (r *toysFiltersResolver) PriceFloor(ctx context.Context, obj *entities.ToysFilters, data *float64) error {
	if obj != nil && data != nil {
		obj.PriceFloor = pointers.New(float32(*data))
	}

	return nil
}

// QuantityFloor is the resolver for the quantityFloor field.
func (r *toysFiltersResolver) QuantityFloor(ctx context.Context, obj *entities.ToysFilters, data *int) error {
	if obj != nil && data != nil {
		obj.QuantityFloor = pointers.New(uint32(*data))
	}

	return nil
}

// Email returns graphqlapi.EmailResolver implementation.
func (r *Resolver) Email() graphqlapi.EmailResolver { return &emailResolver{r} }

// Master returns graphqlapi.MasterResolver implementation.
func (r *Resolver) Master() graphqlapi.MasterResolver { return &masterResolver{r} }

// Mutation returns graphqlapi.MutationResolver implementation.
func (r *Resolver) Mutation() graphqlapi.MutationResolver { return &mutationResolver{r} }

// Query returns graphqlapi.QueryResolver implementation.
func (r *Resolver) Query() graphqlapi.QueryResolver { return &queryResolver{r} }

// Respond returns graphqlapi.RespondResolver implementation.
func (r *Resolver) Respond() graphqlapi.RespondResolver { return &respondResolver{r} }

// Ticket returns graphqlapi.TicketResolver implementation.
func (r *Resolver) Ticket() graphqlapi.TicketResolver { return &ticketResolver{r} }

// Toy returns graphqlapi.ToyResolver implementation.
func (r *Resolver) Toy() graphqlapi.ToyResolver { return &toyResolver{r} }

// Pagination returns graphqlapi.PaginationResolver implementation.
func (r *Resolver) Pagination() graphqlapi.PaginationResolver { return &paginationResolver{r} }

// ToysFilters returns graphqlapi.ToysFiltersResolver implementation.
func (r *Resolver) ToysFilters() graphqlapi.ToysFiltersResolver { return &toysFiltersResolver{r} }

type (
	emailResolver       struct{ *Resolver }
	masterResolver      struct{ *Resolver }
	mutationResolver    struct{ *Resolver }
	queryResolver       struct{ *Resolver }
	respondResolver     struct{ *Resolver }
	ticketResolver      struct{ *Resolver }
	toyResolver         struct{ *Resolver }
	paginationResolver  struct{ *Resolver }
	toysFiltersResolver struct{ *Resolver }
)
