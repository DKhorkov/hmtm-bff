package graphqlcontroller

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"
	"strconv"

	graphqlapi "github.com/DKhorkov/hmtm-bff/api/graphql"
	ssoentities "github.com/DKhorkov/hmtm-sso/pkg/entities"
	"github.com/DKhorkov/libs/logging"
)

// RegisterUser is the resolver for the registerUser field.
func (r *mutationResolver) RegisterUser(ctx context.Context, input graphqlapi.RegisterUserInput) (int, error) {
	r.logger.Info(
		"Received new request",
		"Request",
		input,
		"Context",
		ctx,
		"Traceback",
		logging.GetLogTraceback(),
	)

	userData := ssoentities.RegisterUserDTO{
		Credentials: ssoentities.LoginUserDTO{
			Email:    input.Email,
			Password: input.Password,
		},
	}

	return r.useCases.RegisterUser(userData)
}

// LoginUser is the resolver for the loginUser field.
func (r *mutationResolver) LoginUser(ctx context.Context, input graphqlapi.LoginUserInput) (*ssoentities.TokensDTO, error) {
	r.logger.Info(
		"Received new request",
		"Request",
		input,
		"Context",
		ctx,
		"Traceback",
		logging.GetLogTraceback(),
	)

	userData := ssoentities.LoginUserDTO{
		Email:    input.Email,
		Password: input.Password,
	}

	return r.useCases.LoginUser(userData)
}

// RefreshTokens is the resolver for the refreshTokens field.
func (r *mutationResolver) RefreshTokens(ctx context.Context, input graphqlapi.RefreshTokensInput) (*ssoentities.TokensDTO, error) {
	r.logger.Info(
		"Received new request",
		"Request",
		input,
		"Context",
		ctx,
		"Traceback",
		logging.GetLogTraceback(),
	)

	refreshTokensData := ssoentities.TokensDTO{
		AccessToken:  input.AccessToken,
		RefreshToken: input.RefreshToken,
	}

	return r.useCases.RefreshTokens(refreshTokensData)
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*ssoentities.User, error) {
	r.logger.Info(
		"Received new request",
		"Context",
		ctx,
		"Traceback",
		logging.GetLogTraceback(),
	)

	return r.useCases.GetAllUsers()
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*ssoentities.User, error) {
	r.logger.Info(
		"Received new request",
		"Request",
		id,
		"Context",
		ctx,
		"Traceback",
		logging.GetLogTraceback(),
	)

	userId, err := strconv.Atoi(id)
	if err != nil {
		return nil, err
	}

	return r.useCases.GetUserByID(userId)
}

// Me is the resolver for me field.
func (r *queryResolver) Me(ctx context.Context, accessToken string) (*ssoentities.User, error) {
	r.logger.Info(
		"Received new request",
		"Request",
		accessToken,
		"Context",
		ctx,
		"Traceback",
		logging.GetLogTraceback(),
	)

	return r.useCases.GetMe(accessToken)
}

// Mutation returns graphqlapi.MutationResolver implementation.
func (r *Resolver) Mutation() graphqlapi.MutationResolver { return &mutationResolver{r} }

// Query returns graphqlapi.QueryResolver implementation.
func (r *Resolver) Query() graphqlapi.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
