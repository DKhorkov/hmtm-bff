# https://www.howtographql.com/graphql-go/3-mutations/
# https://habr.com/ru/companies/ruvds/articles/444346/

scalar Time
scalar Any
scalar Upload

type User {
    id: ID!
    email: String!
    createdAt: Time!
    updatedAt: Time!
}

type Category {
    id: ID!
    name: String!
}

type Tag {
    id: ID!
    name: String!
}

type Toy {
    id: ID!
    master: Master!
    category: Category!
    name: String!
    description: String!
    price: Float!
    quantity: Int!
    createdAt: Time!
    updatedAt: Time!
    tags: [Tag]!
}

type Master {
    id: ID!
    user: User!
    info: String!
    createdAt: Time!
    updatedAt: Time!
}

type Ticket {
    id: ID!
    user: User!
    category: Category!
    name: String!
    description: String!
    price: Float!
    quantity: Int!
    createdAt: Time!
    updatedAt: Time!
    tags: [Tag]!
}

type Respond {
    id: ID!
    ticket: Ticket!
    master: Master!
    createdAt: Time!
    updatedAt: Time!
}

type Query {
    # SSO queries:
    users: [User]!
    user(id: ID!): User!
    me: User!

    # Toys queries:
    master(id: ID!): Master!
    masters: [Master]!
    masterToys(masterId: ID!): [Toy]!
    toy(id: ID!): Toy!
    toys: [Toy]!
    myToys: [Toy]!
    tag(id: ID!): Tag!
    tags: [Tag]!
    category(id: ID!): Category!
    categories: [Category]!

    # Tickets queries:
    ticket(id: ID!): Ticket!
    tickets: [Ticket]!
    userTickets(userId: ID!): [Ticket]!
    myTickets: [Ticket]!
    respond(id: ID!): Respond!
    ticketResponds(ticketId: ID!): [Respond]!
    myResponds: [Respond]!
}

input LoginUserInput {
    email: String!
    password: String!
}

input RegisterUserInput {
    email: String!
    password: String!
}

input RegisterMasterInput {
    info: String!
}

input AddToyInput {
    categoryId: ID!
    name: String!
    description: String!
    price: Float!
    quantity: Int!
    tagIds: [ID!]
}

input CreateTicketInput {
    categoryId: ID!
    name: String!
    description: String!
    price: Float!
    quantity: Int!
    tagIds: [ID!]
}

input RespondToTicketInput {
    ticketId: ID!
}

type Mutation {
    # SSO mutations:
    registerUser(input: RegisterUserInput!): ID!
    loginUser(input: LoginUserInput!): Boolean!
    refreshTokens(input: Any): Boolean!

    # Toys mutations:
    registerMaster(input: RegisterMasterInput!): ID!
    addToy(input: AddToyInput!): ID!

    # Files mutations: # TODO Delete later
    uploadFile(input: Upload!): String!

    # Tickets mutations:
    createTicket(input: CreateTicketInput!): ID!
    respondToTicket(input: RespondToTicketInput!): ID!
}
